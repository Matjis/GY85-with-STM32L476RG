
GY85.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003060  08003060  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003060  08003060  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08003074  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08003074  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a41  00000000  00000000  0002b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002d050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cfe  00000000  00000000  0002e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b148  00000000  00000000  00052f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e11af  00000000  00000000  0005e0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f25d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  0013f2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003008 	.word	0x08003008

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003008 	.word	0x08003008

080001c8 <ADXL345_Initialise>:
 */

#include "ADXL345.h"
#include "main.h"

uint8_t ADXL345_Initialise(ADXL345 *dev, I2C_HandleTypeDef *i2cHandle){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	// Set struct parameters
	dev->i2cHandle = i2cHandle;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	601a      	str	r2, [r3, #0]
	dev->acc_mps2[0]= 0.0f;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f04f 0200 	mov.w	r2, #0
 80001de:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1]= 0.0f;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f04f 0200 	mov.w	r2, #0
 80001e6:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2]= 0.0f;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f04f 0200 	mov.w	r2, #0
 80001ee:	60da      	str	r2, [r3, #12]

	// Store number of transaction errors (returned at the end of the function)
	uint8_t errNum = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	// Check device ID (datasheet page 14)
	uint8_t regData;

	status = ADXL345_ReadRegister(dev, ADXL345_REG_DEVID, &regData);
 80001f4:	f107 030d 	add.w	r3, r7, #13
 80001f8:	461a      	mov	r2, r3
 80001fa:	2100      	movs	r1, #0
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f000 f889 	bl	8000314 <ADXL345_ReadRegister>
 8000202:	4603      	mov	r3, r0
 8000204:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000206:	7bbb      	ldrb	r3, [r7, #14]
 8000208:	2b00      	cmp	r3, #0
 800020a:	bf14      	ite	ne
 800020c:	2301      	movne	r3, #1
 800020e:	2300      	moveq	r3, #0
 8000210:	b2db      	uxtb	r3, r3
 8000212:	461a      	mov	r2, r3
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4413      	add	r3, r2
 8000218:	73fb      	strb	r3, [r7, #15]

	if (regData != ADXL345_DEVICE_ID){
 800021a:	7b7b      	ldrb	r3, [r7, #13]
 800021c:	2be5      	cmp	r3, #229	; 0xe5
 800021e:	d001      	beq.n	8000224 <ADXL345_Initialise+0x5c>

		return 255;
 8000220:	23ff      	movs	r3, #255	; 0xff
 8000222:	e01d      	b.n	8000260 <ADXL345_Initialise+0x98>
	status = ADXL345_WriteRegisters(dev, ADXL345_REG_BW_RATE, &regData);
	errNum += (status != HAL_OK);
	*/

	// Set device Measure Bit in POWER_CTL register to 1 so that device is in measurement mode
	regData = 0x08;
 8000224:	2308      	movs	r3, #8
 8000226:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegisters(dev, ADXL345_REG_POWER_CTL, &regData);
 8000228:	f107 030d 	add.w	r3, r7, #13
 800022c:	461a      	mov	r2, r3
 800022e:	212d      	movs	r1, #45	; 0x2d
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 f8a9 	bl	8000388 <ADXL345_WriteRegisters>
 8000236:	4603      	mov	r3, r0
 8000238:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800023a:	7bbb      	ldrb	r3, [r7, #14]
 800023c:	2b00      	cmp	r3, #0
 800023e:	bf14      	ite	ne
 8000240:	2301      	movne	r3, #1
 8000242:	2300      	moveq	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	461a      	mov	r2, r3
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	4413      	add	r3, r2
 800024c:	73fb      	strb	r3, [r7, #15]

	// Toggle LED
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <ADXL345_Initialise+0xa0>)
 8000252:	f000 fe2b 	bl	8000eac <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000256:	2140      	movs	r1, #64	; 0x40
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <ADXL345_Initialise+0xa0>)
 800025a:	f000 fe27 	bl	8000eac <HAL_GPIO_TogglePin>

	// Return number of errors (0 if successful initialisation)
	return errNum;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	48000400 	.word	0x48000400

0800026c <ADXL345_ReadAccelerations>:


HAL_StatusTypeDef ADXL345_ReadAccelerations(ADXL345 *dev){
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	*/

	// Read raw values from accelaration registers (x, y, z -> 16 bits each)
	uint8_t regData[6];

	HAL_StatusTypeDef status = ADXL345_ReadRegisters(dev, ADXL345_REG_DATAX0, regData, 6);
 8000274:	f107 0210 	add.w	r2, r7, #16
 8000278:	2306      	movs	r3, #6
 800027a:	2132      	movs	r1, #50	; 0x32
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 f864 	bl	800034a <ADXL345_ReadRegisters>
 8000282:	4603      	mov	r3, r0
 8000284:	75fb      	strb	r3, [r7, #23]

	int16_t accRawSigned[3];

	accRawSigned[0] = (int16_t) ((regData[1] << 8) | (regData[0]));
 8000286:	7c7b      	ldrb	r3, [r7, #17]
 8000288:	021b      	lsls	r3, r3, #8
 800028a:	b21a      	sxth	r2, r3
 800028c:	7c3b      	ldrb	r3, [r7, #16]
 800028e:	b21b      	sxth	r3, r3
 8000290:	4313      	orrs	r3, r2
 8000292:	b21b      	sxth	r3, r3
 8000294:	813b      	strh	r3, [r7, #8]
	accRawSigned[1] = (int16_t) ((regData[3] << 8) | (regData[2]));
 8000296:	7cfb      	ldrb	r3, [r7, #19]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	b21a      	sxth	r2, r3
 800029c:	7cbb      	ldrb	r3, [r7, #18]
 800029e:	b21b      	sxth	r3, r3
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	817b      	strh	r3, [r7, #10]
	accRawSigned[2] = (int16_t) ((regData[5] << 8) | (regData[4]));
 80002a6:	7d7b      	ldrb	r3, [r7, #21]
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	7d3b      	ldrb	r3, [r7, #20]
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b21b      	sxth	r3, r3
 80002b4:	81bb      	strh	r3, [r7, #12]
	 * Number of bits are 16 - 1 = 15, because of the two's complement (sign bit) you lose 1 bit.
	 *
	 * So the sensitivity ( (m/(s^2)) / LSB ) = ( Range / 2^(# of bits) ) * 9.81 (m/(s^2) = ( 2 / 2^15 ) * 9.81 (m/(s^2) = 0.00006103515 * 9.81 (m/(s^2))
	 */

	dev->acc_mps2[0] = 0.00006103515f * 9.81f * accRawSigned[0];
 80002b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80002ba:	ee07 3a90 	vmov	s15, r3
 80002be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000310 <ADXL345_ReadAccelerations+0xa4>
 80002c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = 0.00006103515f * 9.81f * accRawSigned[1];
 80002d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80002d4:	ee07 3a90 	vmov	s15, r3
 80002d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000310 <ADXL345_ReadAccelerations+0xa4>
 80002e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = 0.00006103515f * 9.81f * accRawSigned[2];
 80002ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002ee:	ee07 3a90 	vmov	s15, r3
 80002f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000310 <ADXL345_ReadAccelerations+0xa4>
 80002fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	edc3 7a03 	vstr	s15, [r3, #12]

	return status;
 8000304:	7dfb      	ldrb	r3, [r7, #23]

}
 8000306:	4618      	mov	r0, r3
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	3a1cf5c2 	.word	0x3a1cf5c2

08000314 <ADXL345_ReadRegister>:


// LOW-LEVEL FUNCTIONS

HAL_StatusTypeDef ADXL345_ReadRegister(ADXL345 *dev, uint8_t reg, uint8_t *data){
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af04      	add	r7, sp, #16
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	460b      	mov	r3, r1
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	7afb      	ldrb	r3, [r7, #11]
 8000328:	b29a      	uxth	r2, r3
 800032a:	f04f 33ff 	mov.w	r3, #4294967295
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	2301      	movs	r3, #1
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	21a6      	movs	r1, #166	; 0xa6
 800033c:	f000 ff96 	bl	800126c <HAL_I2C_Mem_Read>
 8000340:	4603      	mov	r3, r0
}
 8000342:	4618      	mov	r0, r3
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <ADXL345_ReadRegisters>:

HAL_StatusTypeDef ADXL345_ReadRegisters(ADXL345 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 800034a:	b580      	push	{r7, lr}
 800034c:	b088      	sub	sp, #32
 800034e:	af04      	add	r7, sp, #16
 8000350:	60f8      	str	r0, [r7, #12]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	461a      	mov	r2, r3
 8000356:	460b      	mov	r3, r1
 8000358:	72fb      	strb	r3, [r7, #11]
 800035a:	4613      	mov	r3, r2
 800035c:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, HAL_MAX_DELAY);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	6818      	ldr	r0, [r3, #0]
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	b29a      	uxth	r2, r3
 8000366:	7abb      	ldrb	r3, [r7, #10]
 8000368:	b29b      	uxth	r3, r3
 800036a:	f04f 31ff 	mov.w	r1, #4294967295
 800036e:	9102      	str	r1, [sp, #8]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2301      	movs	r3, #1
 8000378:	21a6      	movs	r1, #166	; 0xa6
 800037a:	f000 ff77 	bl	800126c <HAL_I2C_Mem_Read>
 800037e:	4603      	mov	r3, r0
}
 8000380:	4618      	mov	r0, r3
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <ADXL345_WriteRegisters>:

HAL_StatusTypeDef ADXL345_WriteRegisters(ADXL345 *dev, uint8_t reg, uint8_t *data){
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af04      	add	r7, sp, #16
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	460b      	mov	r3, r1
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6818      	ldr	r0, [r3, #0]
 800039a:	7afb      	ldrb	r3, [r7, #11]
 800039c:	b29a      	uxth	r2, r3
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
 80003a2:	9302      	str	r3, [sp, #8]
 80003a4:	2301      	movs	r3, #1
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2301      	movs	r3, #1
 80003ae:	21a6      	movs	r1, #166	; 0xa6
 80003b0:	f000 fe48 	bl	8001044 <HAL_I2C_Mem_Write>
 80003b4:	4603      	mov	r3, r0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fa29 	bl	800081a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f81c 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 f8be 	bl	800054c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003d0:	f000 f87e 	bl	80004d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialise accelerometer
  ADXL345_Initialise(&acc, &hi2c1);
 80003d4:	4908      	ldr	r1, [pc, #32]	; (80003f8 <main+0x38>)
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <main+0x3c>)
 80003d8:	f7ff fef6 	bl	80001c8 <ADXL345_Initialise>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  accDataReady = 0;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <main+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	ADXL345_ReadAccelerations(&acc);
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <main+0x3c>)
 80003e4:	f7ff ff42 	bl	800026c <ADXL345_ReadAccelerations>

	if(accDataReady){
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <main+0x40>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f8      	beq.n	80003e2 <main+0x22>

		// Clear flag
		accDataReady = 0;
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <main+0x40>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
	ADXL345_ReadAccelerations(&acc);
 80003f6:	e7f4      	b.n	80003e2 <main+0x22>
 80003f8:	20000038 	.word	0x20000038
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000084 	.word	0x20000084

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0b8      	sub	sp, #224	; 0xe0
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800040e:	2244      	movs	r2, #68	; 0x44
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fdf0 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	463b      	mov	r3, r7
 800042a:	2288      	movs	r2, #136	; 0x88
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fde2 	bl	8002ff8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000434:	2310      	movs	r3, #16
 8000436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000446:	2360      	movs	r3, #96	; 0x60
 8000448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fb3a 	bl	8001ad0 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000462:	f000 f8d5 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000484:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f001 ff06 	bl	800229c <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000496:	f000 f8bb 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800049a:	2340      	movs	r3, #64	; 0x40
 800049c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800049e:	2300      	movs	r3, #0
 80004a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a2:	463b      	mov	r3, r7
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 f8c7 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004b0:	f000 f8ae 	bl	8000610 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b8:	f001 fab4 	bl	8001a24 <HAL_PWREx_ControlVoltageScaling>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004c2:	f000 f8a5 	bl	8000610 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	37e0      	adds	r7, #224	; 0xe0
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_I2C1_Init+0x74>)
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MX_I2C1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_I2C1_Init+0x74>)
 80004dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80004e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <MX_I2C1_Init+0x74>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_I2C1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_I2C1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_I2C1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <MX_I2C1_Init+0x74>)
 800050e:	f000 fd0a 	bl	8000f26 <HAL_I2C_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000518:	f000 f87a 	bl	8000610 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800051c:	2100      	movs	r1, #0
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <MX_I2C1_Init+0x74>)
 8000520:	f001 f9da 	bl	80018d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800052a:	f000 f871 	bl	8000610 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800052e:	2100      	movs	r1, #0
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <MX_I2C1_Init+0x74>)
 8000532:	f001 fa1c 	bl	800196e <HAL_I2CEx_ConfigDigitalFilter>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 f868 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000038 	.word	0x20000038
 8000548:	40005400 	.word	0x40005400

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a27      	ldr	r2, [pc, #156]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <MX_GPIO_Init+0xb8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a21      	ldr	r2, [pc, #132]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <MX_GPIO_Init+0xb8>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_GPIO_Init+0xb8>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4816      	ldr	r0, [pc, #88]	; (8000608 <MX_GPIO_Init+0xbc>)
 80005b0:	f000 fc64 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_INT2_Pin */
  GPIO_InitStruct.Pin = A_INT2_Pin;
 80005b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_GPIO_Init+0xc0>)
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_INT2_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 faac 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <MX_GPIO_Init+0xbc>)
 80005e8:	f000 fa9e 	bl	8000b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2017      	movs	r0, #23
 80005f2:	f000 fa62 	bl	8000aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005f6:	2017      	movs	r0, #23
 80005f8:	f000 fa7b 	bl	8000af2 <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400
 800060c:	10110000 	.word	0x10110000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x44>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x44>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6613      	str	r3, [r2, #96]	; 0x60
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x44>)
 8000634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x44>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x44>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x44>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_I2C_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d128      	bne.n	80006dc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a8:	2312      	movs	r3, #18
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b4:	2304      	movs	r3, #4
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <HAL_I2C_MspInit+0x84>)
 80006c0:	f000 fa32 	bl	8000b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 80006c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 80006ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ce:	6593      	str	r3, [r2, #88]	; 0x58
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_I2C_MspInit+0x80>)
 80006d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000400 	.word	0x48000400

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8be 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000750:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000754:	f000 fbc4 	bl	8000ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <SystemInit+0x64>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <SystemInit+0x64>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SystemInit+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <SystemInit+0x68>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <SystemInit+0x68>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <SystemInit+0x68>)
 8000788:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800078c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <SystemInit+0x68>)
 8000794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000798:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <SystemInit+0x68>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <SystemInit+0x68>)
 80007a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <SystemInit+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SystemInit+0x64>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	40021000 	.word	0x40021000

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ffc6 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007d2:	e003      	b.n	80007dc <LoopCopyDataInit>

080007d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007da:	3104      	adds	r1, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopForever+0xe>)
	adds	r2, r0, r1
 80007e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007e4:	d3f6      	bcc.n	80007d4 <CopyDataInit>
	ldr	r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e8:	e002      	b.n	80007f0 <LoopFillZerobss>

080007ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007ec:	f842 3b04 	str.w	r3, [r2], #4

080007f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LoopForever+0x16>)
	cmp	r2, r3
 80007f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007f4:	d3f9      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f002 fbdb 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fde1 	bl	80003c0 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000800:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000804:	08003068 	.word	0x08003068
	ldr	r0, =_sdata
 8000808:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800080c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000810:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000814:	2000008c 	.word	0x2000008c

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>

0800081a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f93d 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f80e 	bl	800084c <HAL_InitTick>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e001      	b.n	8000840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800083c:	f7ff fef0 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000840:	79fb      	ldrb	r3, [r7, #7]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_InitTick+0x6c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d023      	beq.n	80008a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_InitTick+0x70>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f949 	bl	8000b0e <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10f      	bne.n	80008a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d809      	bhi.n	800089c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f913 	bl	8000aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_InitTick+0x74>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e007      	b.n	80008ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e004      	b.n	80008ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e001      	b.n	80008ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000088 	.word	0x20000088

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000088 	.word	0x20000088

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db0b      	blt.n	8000992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 021f 	and.w	r2, r3, #31
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <__NVIC_EnableIRQ+0x38>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	095b      	lsrs	r3, r3, #5
 8000988:	2001      	movs	r0, #1
 800098a:	fa00 f202 	lsl.w	r2, r0, r2
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff29 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff3e 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff8e 	bl	80009f8 <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff31 	bl	8000968 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e17f      	b.n	8000e38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8171 	beq.w	8000e32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d00b      	beq.n	8000b70 <HAL_GPIO_Init+0x48>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b64:	2b11      	cmp	r3, #17
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b12      	cmp	r3, #18
 8000b6e:	d130      	bne.n	8000bd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	f003 0201 	and.w	r2, r3, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d118      	bne.n	8000c10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000be4:	2201      	movs	r2, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	f003 0201 	and.w	r2, r3, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x128>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b12      	cmp	r3, #18
 8000c4e:	d123      	bne.n	8000c98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	6939      	ldr	r1, [r7, #16]
 8000c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0203 	and.w	r2, r3, #3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80ac 	beq.w	8000e32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b5f      	ldr	r3, [pc, #380]	; (8000e58 <HAL_GPIO_Init+0x330>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a5e      	ldr	r2, [pc, #376]	; (8000e58 <HAL_GPIO_Init+0x330>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <HAL_GPIO_Init+0x330>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf2:	4a5a      	ldr	r2, [pc, #360]	; (8000e5c <HAL_GPIO_Init+0x334>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d1c:	d025      	beq.n	8000d6a <HAL_GPIO_Init+0x242>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_GPIO_Init+0x338>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d01f      	beq.n	8000d66 <HAL_GPIO_Init+0x23e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_GPIO_Init+0x33c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d019      	beq.n	8000d62 <HAL_GPIO_Init+0x23a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4d      	ldr	r2, [pc, #308]	; (8000e68 <HAL_GPIO_Init+0x340>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x236>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <HAL_GPIO_Init+0x344>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x232>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4b      	ldr	r2, [pc, #300]	; (8000e70 <HAL_GPIO_Init+0x348>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x22e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <HAL_GPIO_Init+0x34c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x22a>
 8000d4e:	2306      	movs	r3, #6
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x244>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d7c:	4937      	ldr	r1, [pc, #220]	; (8000e5c <HAL_GPIO_Init+0x334>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dae:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_GPIO_Init+0x350>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f ae78 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	48000400 	.word	0x48000400
 8000e64:	48000800 	.word	0x48000800
 8000e68:	48000c00 	.word	0x48000c00
 8000e6c:	48001000 	.word	0x48001000
 8000e70:	48001400 	.word	0x48001400
 8000e74:	48001800 	.word	0x48001800
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	041a      	lsls	r2, r3, #16
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43d9      	mvns	r1, r3
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	400b      	ands	r3, r1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f806 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e081      	b.n	800103c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fb8b 	bl	8000668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2224      	movs	r2, #36	; 0x24
 8000f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d107      	bne.n	8000fa0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	e006      	b.n	8000fae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d104      	bne.n	8000fc0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fe2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	ea42 0103 	orr.w	r1, r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	021a      	lsls	r2, r3, #8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69d9      	ldr	r1, [r3, #28]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	817b      	strh	r3, [r7, #10]
 8001056:	460b      	mov	r3, r1
 8001058:	813b      	strh	r3, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b20      	cmp	r3, #32
 8001068:	f040 80f9 	bne.w	800125e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_I2C_Mem_Write+0x34>
 8001072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0ed      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Mem_Write+0x4e>
 800108e:	2302      	movs	r3, #2
 8001090:	e0e6      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800109a:	f7ff fc27 	bl	80008ec <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2319      	movs	r3, #25
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f000 fac3 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0d1      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2221      	movs	r2, #33	; 0x21
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a3a      	ldr	r2, [r7, #32]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010e4:	88f8      	ldrh	r0, [r7, #6]
 80010e6:	893a      	ldrh	r2, [r7, #8]
 80010e8:	8979      	ldrh	r1, [r7, #10]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4603      	mov	r3, r0
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f9d3 	bl	80014a0 <I2C_RequestMemoryWrite>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0a9      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	2bff      	cmp	r3, #255	; 0xff
 8001114:	d90e      	bls.n	8001134 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	22ff      	movs	r2, #255	; 0xff
 800111a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001120:	b2da      	uxtb	r2, r3
 8001122:	8979      	ldrh	r1, [r7, #10]
 8001124:	2300      	movs	r3, #0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 fba5 	bl	800187c <I2C_TransferConfig>
 8001132:	e00f      	b.n	8001154 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001138:	b29a      	uxth	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001142:	b2da      	uxtb	r2, r3
 8001144:	8979      	ldrh	r1, [r7, #10]
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 fb94 	bl	800187c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 faad 	bl	80016b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e07b      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d034      	beq.n	800120c <HAL_I2C_Mem_Write+0x1c8>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d130      	bne.n	800120c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 fa3f 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e04d      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d90e      	bls.n	80011ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	8979      	ldrh	r1, [r7, #10]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fb49 	bl	800187c <I2C_TransferConfig>
 80011ea:	e00f      	b.n	800120c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	8979      	ldrh	r1, [r7, #10]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 fb38 	bl	800187c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d19e      	bne.n	8001154 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 fa8c 	bl	8001738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e01a      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2220      	movs	r2, #32
 8001230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_I2C_Mem_Write+0x224>)
 800123e:	400b      	ands	r3, r1
 8001240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2220      	movs	r2, #32
 8001246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	fe00e800 	.word	0xfe00e800

0800126c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4603      	mov	r3, r0
 800127c:	817b      	strh	r3, [r7, #10]
 800127e:	460b      	mov	r3, r1
 8001280:	813b      	strh	r3, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b20      	cmp	r3, #32
 8001290:	f040 80fd 	bne.w	800148e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_I2C_Mem_Read+0x34>
 800129a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0f1      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Mem_Read+0x4e>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e0ea      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012c2:	f7ff fb13 	bl	80008ec <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2319      	movs	r3, #25
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 f9af 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0d5      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2222      	movs	r2, #34	; 0x22
 80012e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a3a      	ldr	r2, [r7, #32]
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800130c:	88f8      	ldrh	r0, [r7, #6]
 800130e:	893a      	ldrh	r2, [r7, #8]
 8001310:	8979      	ldrh	r1, [r7, #10]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4603      	mov	r3, r0
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f913 	bl	8001548 <I2C_RequestMemoryRead>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0ad      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d90e      	bls.n	800135c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	b2da      	uxtb	r2, r3
 800134a:	8979      	ldrh	r1, [r7, #10]
 800134c:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_I2C_Mem_Read+0x22c>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fa91 	bl	800187c <I2C_TransferConfig>
 800135a:	e00f      	b.n	800137c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136a:	b2da      	uxtb	r2, r3
 800136c:	8979      	ldrh	r1, [r7, #10]
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_I2C_Mem_Read+0x22c>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fa80 	bl	800187c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	2104      	movs	r1, #4
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 f956 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e07c      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d034      	beq.n	800143c <HAL_I2C_Mem_Read+0x1d0>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d130      	bne.n	800143c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	2200      	movs	r2, #0
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f927 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e04d      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d90e      	bls.n	800141c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001408:	b2da      	uxtb	r2, r3
 800140a:	8979      	ldrh	r1, [r7, #10]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fa31 	bl	800187c <I2C_TransferConfig>
 800141a:	e00f      	b.n	800143c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	b2da      	uxtb	r2, r3
 800142c:	8979      	ldrh	r1, [r7, #10]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fa20 	bl	800187c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d19a      	bne.n	800137c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f974 	bl	8001738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e01a      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_I2C_Mem_Read+0x230>)
 800146e:	400b      	ands	r3, r1
 8001470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80002400 	.word	0x80002400
 800149c:	fe00e800 	.word	0xfe00e800

080014a0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	460b      	mov	r3, r1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	8979      	ldrh	r1, [r7, #10]
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <I2C_RequestMemoryWrite+0xa4>)
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f9d7 	bl	800187c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	69b9      	ldr	r1, [r7, #24]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f8f0 	bl	80016b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e02c      	b.n	800153c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014e8:	893b      	ldrh	r3, [r7, #8]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
 80014f2:	e015      	b.n	8001520 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014f4:	893b      	ldrh	r3, [r7, #8]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f8d6 	bl	80016b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e012      	b.n	800153c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f884 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	80002000 	.word	0x80002000

08001548 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4603      	mov	r3, r0
 8001558:	817b      	strh	r3, [r7, #10]
 800155a:	460b      	mov	r3, r1
 800155c:	813b      	strh	r3, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <I2C_RequestMemoryRead+0xa4>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 f984 	bl	800187c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f89d 	bl	80016b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e02c      	b.n	80015e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800158e:	893b      	ldrh	r3, [r7, #8]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
 8001598:	e015      	b.n	80015c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800159a:	893b      	ldrh	r3, [r7, #8]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f883 	bl	80016b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e012      	b.n	80015e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015bc:	893b      	ldrh	r3, [r7, #8]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f831 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	80002000 	.word	0x80002000

080015f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d103      	bne.n	800160e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d007      	beq.n	800162c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	619a      	str	r2, [r3, #24]
  }
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001648:	e022      	b.n	8001690 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d01e      	beq.n	8001690 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001652:	f7ff f94b 	bl	80008ec <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d302      	bcc.n	8001668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d113      	bne.n	8001690 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e00f      	b.n	80016b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4013      	ands	r3, r2
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	429a      	cmp	r2, r3
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d0cd      	beq.n	800164a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c4:	e02c      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f870 	bl	80017b0 <I2C_IsAcknowledgeFailed>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e02a      	b.n	8001730 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d01e      	beq.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e2:	f7ff f903 	bl	80008ec <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d302      	bcc.n	80016f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d113      	bne.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e007      	b.n	8001730 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d1cb      	bne.n	80016c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001744:	e028      	b.n	8001798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f830 	bl	80017b0 <I2C_IsAcknowledgeFailed>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e026      	b.n	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800175a:	f7ff f8c7 	bl	80008ec <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d302      	bcc.n	8001770 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d113      	bne.n	8001798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e007      	b.n	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d1cf      	bne.n	8001746 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d151      	bne.n	800186e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ca:	e022      	b.n	8001812 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d2:	d01e      	beq.n	8001812 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d4:	f7ff f88a 	bl	80008ec <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d302      	bcc.n	80017ea <I2C_IsAcknowledgeFailed+0x3a>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d113      	bne.n	8001812 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02e      	b.n	8001870 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b20      	cmp	r3, #32
 800181e:	d1d5      	bne.n	80017cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2210      	movs	r2, #16
 8001826:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2220      	movs	r2, #32
 800182e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fedd 	bl	80015f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <I2C_IsAcknowledgeFailed+0xc8>)
 8001842:	400b      	ands	r3, r1
 8001844:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f043 0204 	orr.w	r2, r3, #4
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	fe00e800 	.word	0xfe00e800

0800187c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	817b      	strh	r3, [r7, #10]
 800188a:	4613      	mov	r3, r2
 800188c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	0d5b      	lsrs	r3, r3, #21
 8001898:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <I2C_TransferConfig+0x58>)
 800189e:	430b      	orrs	r3, r1
 80018a0:	43db      	mvns	r3, r3
 80018a2:	ea02 0103 	and.w	r1, r2, r3
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ac:	7a7b      	ldrb	r3, [r7, #9]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	431a      	orrs	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	03ff63ff 	.word	0x03ff63ff

080018d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d138      	bne.n	8001960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e032      	b.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800192a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b20      	cmp	r3, #32
 8001982:	d139      	bne.n	80019f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800198e:	2302      	movs	r3, #2
 8001990:	e033      	b.n	80019fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2224      	movs	r2, #36	; 0x24
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40007000 	.word	0x40007000

08001a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a32:	d130      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a40:	d038      	beq.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2232      	movs	r2, #50	; 0x32
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9b      	lsrs	r3, r3, #18
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a68:	e002      	b.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d102      	bne.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f2      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a90:	d110      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e00f      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa2:	d007      	beq.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e3d4      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae2:	4ba1      	ldr	r3, [pc, #644]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80e4 	beq.w	8001ccc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4a>
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	f040 808b 	bne.w	8001c28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 8087 	bne.w	8001c28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1a:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x62>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e3ac      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_RCC_OscConfig+0x7c>
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_OscConfig+0x88>
 8001b4c:	4b86      	ldr	r3, [pc, #536]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d223      	bcs.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fd09 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e38d      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b70:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4977      	ldr	r1, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4972      	ldr	r1, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
 8001ba2:	e025      	b.n	8001bf0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba4:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6f      	ldr	r2, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	496a      	ldr	r1, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	4965      	ldr	r1, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fcc9 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e34d      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf0:	f000 fc36 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	495a      	ldr	r1, [pc, #360]	; (8001d6c <HAL_RCC_OscConfig+0x29c>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_OscConfig+0x2a0>)
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <HAL_RCC_OscConfig+0x2a4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fe19 	bl	800084c <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d052      	beq.n	8001cca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	e331      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d032      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c30:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fe56 	bl	80008ec <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c44:	f7fe fe52 	bl	80008ec <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e31a      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	493b      	ldr	r1, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4936      	ldr	r1, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e01a      	b.n	8001ccc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fe23 	bl	80008ec <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001caa:	f7fe fe1f 	bl	80008ec <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e2e7      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x1da>
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d074      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x21a>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d10e      	bne.n	8001d02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d10b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d064      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d160      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e2c4      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x24a>
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e01d      	b.n	8001d56 <HAL_RCC_OscConfig+0x286>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x26e>
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x286>
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x298>)
 8001d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fdc5 	bl	80008ec <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d64:	e011      	b.n	8001d8a <HAL_RCC_OscConfig+0x2ba>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08003020 	.word	0x08003020
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7fe fdb8 	bl	80008ec <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e280      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4baf      	ldr	r3, [pc, #700]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2a8>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe fda8 	bl	80008ec <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fda4 	bl	80008ec <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e26c      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4ba5      	ldr	r3, [pc, #660]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2d0>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d060      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x310>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d119      	bne.n	8001e0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d116      	bne.n	8001e0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de0:	4b99      	ldr	r3, [pc, #612]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_OscConfig+0x328>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e249      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b93      	ldr	r3, [pc, #588]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	4990      	ldr	r1, [pc, #576]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e0c:	e040      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d023      	beq.n	8001e5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e16:	4b8c      	ldr	r3, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a8b      	ldr	r2, [pc, #556]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe fd63 	bl	80008ec <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fd5f 	bl	80008ec <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e227      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3c:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	497c      	ldr	r1, [pc, #496]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e018      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a79      	ldr	r2, [pc, #484]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fd3f 	bl	80008ec <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7fe fd3b 	bl	80008ec <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e203      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e84:	4b70      	ldr	r3, [pc, #448]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d03c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01c      	beq.n	8001ede <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	4a67      	ldr	r2, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7fe fd1a 	bl	80008ec <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7fe fd16 	bl	80008ec <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1de      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ece:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ef      	beq.n	8001ebc <HAL_RCC_OscConfig+0x3ec>
 8001edc:	e01b      	b.n	8001f16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe fcfd 	bl	80008ec <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe fcf9 	bl	80008ec <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1c1      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f08:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ef      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a6 	beq.w	8002070 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a43      	ldr	r2, [pc, #268]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f40:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f50:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_OscConfig+0x57c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d118      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x57c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x57c>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f68:	f7fe fcc0 	bl	80008ec <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe fcbc 	bl	80008ec <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e184      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_RCC_OscConfig+0x57c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4d8>
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa6:	e024      	b.n	8001ff2 <HAL_RCC_OscConfig+0x522>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d110      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x502>
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a20      	ldr	r2, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd0:	e00f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x522>
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fc77 	bl	80008ec <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe fc73 	bl	80008ec <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e139      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_OscConfig+0x578>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ed      	beq.n	8002002 <HAL_RCC_OscConfig+0x532>
 8002026:	e01a      	b.n	800205e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe fc60 	bl	80008ec <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202e:	e00f      	b.n	8002050 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe fc5c 	bl	80008ec <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d906      	bls.n	8002050 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e122      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002050:	4b90      	ldr	r3, [pc, #576]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e8      	bne.n	8002030 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800206a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8108 	beq.w	800228a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	2b02      	cmp	r3, #2
 8002080:	f040 80d0 	bne.w	8002224 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	429a      	cmp	r2, r3
 8002096:	d130      	bne.n	80020fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	3b01      	subs	r3, #1
 80020a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d127      	bne.n	80020fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11f      	bne.n	80020fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c4:	2a07      	cmp	r2, #7
 80020c6:	bf14      	ite	ne
 80020c8:	2201      	movne	r2, #1
 80020ca:	2200      	moveq	r2, #0
 80020cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d113      	bne.n	80020fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	3b01      	subs	r3, #1
 80020e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d06e      	beq.n	80021d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d069      	beq.n	80021d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800210c:	4b61      	ldr	r3, [pc, #388]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b7      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002128:	f7fe fbe0 	bl	80008ec <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe fbdc 	bl	80008ec <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0a4      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	4b51      	ldr	r3, [pc, #324]	; (8002298 <HAL_RCC_OscConfig+0x7c8>)
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800215e:	3a01      	subs	r2, #1
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002168:	0212      	lsls	r2, r2, #8
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	0552      	lsls	r2, r2, #21
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800217c:	0852      	lsrs	r2, r2, #1
 800217e:	3a01      	subs	r2, #1
 8002180:	0652      	lsls	r2, r2, #25
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002188:	0912      	lsrs	r2, r2, #4
 800218a:	0452      	lsls	r2, r2, #17
 800218c:	430a      	orrs	r2, r1
 800218e:	4941      	ldr	r1, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3e      	ldr	r2, [pc, #248]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a3b      	ldr	r2, [pc, #236]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ac:	f7fe fb9e 	bl	80008ec <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fb9a 	bl	80008ec <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e062      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d2:	e05a      	b.n	800228a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e059      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d152      	bne.n	800228a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021fc:	f7fe fb76 	bl	80008ec <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fb72 	bl	80008ec <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e03a      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x734>
 8002222:	e032      	b.n	800228a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d02d      	beq.n	8002286 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002248:	f023 0303 	bic.w	r3, r3, #3
 800224c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 8002254:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fb45 	bl	80008ec <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fb41 	bl	80008ec <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_OscConfig+0x7c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x796>
 8002284:	e001      	b.n	800228a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	f99d808c 	.word	0xf99d808c

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0c8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4961      	ldr	r1, [pc, #388]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d04c      	beq.n	8002386 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f4:	4b56      	ldr	r3, [pc, #344]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d121      	bne.n	8002344 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e09e      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d107      	bne.n	800231c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230c:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d115      	bne.n	8002344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e092      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e086      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e07e      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 0203 	bic.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	493f      	ldr	r1, [pc, #252]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002356:	f7fe fac9 	bl	80008ec <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235c:	e00a      	b.n	8002374 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235e:	f7fe fac5 	bl	80008ec <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e066      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 020c 	and.w	r2, r3, #12
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	429a      	cmp	r2, r3
 8002384:	d1eb      	bne.n	800235e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	492c      	ldr	r1, [pc, #176]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d210      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 0207 	bic.w	r2, r3, #7
 80023ba:	4924      	ldr	r1, [pc, #144]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_ClockConfig+0x1b0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e036      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4910      	ldr	r1, [pc, #64]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002412:	f000 f825 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490c      	ldr	r1, [pc, #48]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fa08 	bl	800084c <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002440:	7afb      	ldrb	r3, [r7, #11]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08003020 	.word	0x08003020
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d121      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d11e      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e005      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d102      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_GetSysClockFreq+0x110>)
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	e004      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d134      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0xa6>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d003      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xac>
 8002504:	e005      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_GetSysClockFreq+0x110>)
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	e005      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCC_GetSysClockFreq+0x114>)
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	e002      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	617b      	str	r3, [r7, #20]
      break;
 8002516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	3301      	adds	r3, #1
 8002524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	fb02 f203 	mul.w	r2, r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	0e5b      	lsrs	r3, r3, #25
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	3301      	adds	r3, #1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002558:	69bb      	ldr	r3, [r7, #24]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	08003030 	.word	0x08003030
 8002570:	00f42400 	.word	0x00f42400
 8002574:	007a1200 	.word	0x007a1200

08002578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002590:	f7ff fa3a 	bl	8001a08 <HAL_PWREx_GetVoltageRange>
 8002594:	6178      	str	r0, [r7, #20]
 8002596:	e014      	b.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4a24      	ldr	r2, [pc, #144]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b0:	f7ff fa2a 	bl	8001a08 <HAL_PWREx_GetVoltageRange>
 80025b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c8:	d10b      	bne.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d919      	bls.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2ba0      	cmp	r3, #160	; 0xa0
 80025d4:	d902      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d6:	2302      	movs	r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e013      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e010      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d902      	bls.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e8:	2303      	movs	r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e00a      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d102      	bne.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f4:	2302      	movs	r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	e004      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b70      	cmp	r3, #112	; 0x70
 80025fe:	d101      	bne.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002600:	2301      	movs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 0207 	bic.w	r2, r3, #7
 800260c:	4909      	ldr	r1, [pc, #36]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	40022000 	.word	0x40022000

08002638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002640:	2300      	movs	r3, #0
 8002642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002644:	2300      	movs	r3, #0
 8002646:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002650:	2b00      	cmp	r3, #0
 8002652:	d041      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002658:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800265c:	d02a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800265e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002662:	d824      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800266a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800266e:	d81e      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002678:	d010      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800267a:	e018      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800267c:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a85      	ldr	r2, [pc, #532]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002688:	e015      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fabb 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800269a:	e00c      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3320      	adds	r3, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fba6 	bl	8002df4 <RCCEx_PLLSAI2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ac:	e003      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	74fb      	strb	r3, [r7, #19]
      break;
 80026b2:	e000      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ca:	4973      	ldr	r1, [pc, #460]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026d2:	e001      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d041      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ec:	d02a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026f2:	d824      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026fe:	d81e      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d010      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800270a:	e018      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a61      	ldr	r2, [pc, #388]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002716:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002718:	e015      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fa73 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800272a:	e00c      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3320      	adds	r3, #32
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fb5e 	bl	8002df4 <RCCEx_PLLSAI2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800273c:	e003      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	74fb      	strb	r3, [r7, #19]
      break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800274c:	4b52      	ldr	r3, [pc, #328]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	494f      	ldr	r1, [pc, #316]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002762:	e001      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a0 	beq.w	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	4a40      	ldr	r2, [pc, #256]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279a:	6593      	str	r3, [r2, #88]	; 0x58
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a3a      	ldr	r2, [pc, #232]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b8:	f7fe f898 	bl	80008ec <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027be:	e009      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe f894 	bl	80008ec <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	74fb      	strb	r3, [r7, #19]
        break;
 80027d2:	e005      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d15c      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01f      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d019      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	4a20      	ldr	r2, [pc, #128]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe f853 	bl	80008ec <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002848:	e00b      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe f84f 	bl	80008ec <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d902      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	74fb      	strb	r3, [r7, #19]
            break;
 8002860:	e006      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ec      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002886:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800288e:	e009      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
 8002894:	e006      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a4:	7c7b      	ldrb	r3, [r7, #17]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d105      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b9e      	ldr	r3, [pc, #632]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a9d      	ldr	r2, [pc, #628]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c2:	4b98      	ldr	r3, [pc, #608]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f023 0203 	bic.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	4994      	ldr	r1, [pc, #592]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e4:	4b8f      	ldr	r3, [pc, #572]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f023 020c 	bic.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	498c      	ldr	r1, [pc, #560]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002906:	4b87      	ldr	r3, [pc, #540]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4983      	ldr	r1, [pc, #524]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002928:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	497b      	ldr	r1, [pc, #492]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	4972      	ldr	r1, [pc, #456]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800296c:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	496a      	ldr	r1, [pc, #424]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	4961      	ldr	r1, [pc, #388]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b0:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	4959      	ldr	r1, [pc, #356]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	4950      	ldr	r1, [pc, #320]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	4948      	ldr	r1, [pc, #288]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	493f      	ldr	r1, [pc, #252]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d028      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a46:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a62:	60d3      	str	r3, [r2, #12]
 8002a64:	e011      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	2101      	movs	r1, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f8c8 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	491f      	ldr	r1, [pc, #124]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac0:	60d3      	str	r3, [r2, #12]
 8002ac2:	e011      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f899 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02b      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b12:	d109      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a02      	ldr	r2, [pc, #8]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
 8002b20:	e014      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f867 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02f      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	4928      	ldr	r1, [pc, #160]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f844 	bl	8002c0c <RCCEx_PLLSAI1_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d014      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	74bb      	strb	r3, [r7, #18]
 8002b92:	e011      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f925 	bl	8002df4 <RCCEx_PLLSAI2_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd2:	490d      	ldr	r1, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000

08002c0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c1a:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10d      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
       ||
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d047      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e044      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d018      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x86>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d825      	bhi.n	8002cb0 <RCCEx_PLLSAI1_Config+0xa4>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0x62>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d009      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x74>
 8002c6c:	e020      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6e:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e01a      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c80:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e013      	b.n	8002cba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c92:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cae:	e006      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e004      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	4944      	ldr	r1, [pc, #272]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d17d      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fd fdfa 	bl	80008ec <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cfa:	e009      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cfc:	f7fd fdf6 	bl	80008ec <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d0e:	e005      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d10:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ef      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d160      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d28:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	0211      	lsls	r1, r2, #8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	0912      	lsrs	r2, r2, #4
 8002d40:	0452      	lsls	r2, r2, #17
 8002d42:	430a      	orrs	r2, r1
 8002d44:	492a      	ldr	r1, [pc, #168]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	610b      	str	r3, [r1, #16]
 8002d4a:	e027      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d112      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	0211      	lsls	r1, r2, #8
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6912      	ldr	r2, [r2, #16]
 8002d68:	0852      	lsrs	r2, r2, #1
 8002d6a:	3a01      	subs	r2, #1
 8002d6c:	0552      	lsls	r2, r2, #21
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	491f      	ldr	r1, [pc, #124]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	610b      	str	r3, [r1, #16]
 8002d76:	e011      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	0211      	lsls	r1, r2, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6952      	ldr	r2, [r2, #20]
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0652      	lsls	r2, r2, #25
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd fda0 	bl	80008ec <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dae:	e009      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db0:	f7fd fd9c 	bl	80008ec <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	73fb      	strb	r3, [r7, #15]
          break;
 8002dc2:	e005      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ef      	beq.n	8002db0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	4904      	ldr	r1, [pc, #16]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d018      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0203 	and.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10d      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
       ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e26:	4b61      	ldr	r3, [pc, #388]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
       ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d047      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e044      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d018      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x86>
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d825      	bhi.n	8002e98 <RCCEx_PLLSAI2_Config+0xa4>
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d002      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0x62>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d009      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x74>
 8002e54:	e020      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e56:	4b55      	ldr	r3, [pc, #340]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11d      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e01a      	b.n	8002e9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e013      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e96:	e006      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e004      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	4939      	ldr	r1, [pc, #228]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d167      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a35      	ldr	r2, [pc, #212]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fd fd06 	bl	80008ec <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee4:	f7fd fd02 	bl	80008ec <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ef      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d14a      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	0211      	lsls	r1, r2, #8
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	0912      	lsrs	r2, r2, #4
 8002f28:	0452      	lsls	r2, r2, #17
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	491f      	ldr	r1, [pc, #124]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	614b      	str	r3, [r1, #20]
 8002f32:	e011      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6892      	ldr	r2, [r2, #8]
 8002f44:	0211      	lsls	r1, r2, #8
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6912      	ldr	r2, [r2, #16]
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0652      	lsls	r2, r2, #25
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4916      	ldr	r1, [pc, #88]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fd fcc2 	bl	80008ec <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f6a:	e009      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f6c:	f7fd fcbe 	bl	80008ec <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d902      	bls.n	8002f80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f7e:	e005      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4904      	ldr	r1, [pc, #16]	; (8002fac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2600      	movs	r6, #0
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4d0b      	ldr	r5, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 f820 	bl	8003008 <_init>
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003060 	.word	0x08003060
 8002fec:	08003060 	.word	0x08003060
 8002ff0:	08003060 	.word	0x08003060
 8002ff4:	08003064 	.word	0x08003064

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
